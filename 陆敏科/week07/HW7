from google.colab import drive
drive.mount('/content/drive')


# 层次聚类接口调用
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
from matplotlib import pyplot as plt
import numpy as np

X = np.array([[1,2],[3,2],[4,4],[1,2],[1,3]])
Z = linkage(X, 'ward')   # 'ward'方差最小化法，选择使得合并后簇的类内误差平方和最小的两个簇合并。linkage完成了完整的凝聚聚类，聚成一大类。
f = fcluster(Z, 4, 'distance')   # 'distance'以距离作为停止合并条件，找出聚类里距离小于4的簇。fcluster完成了分类。

fig = plt.figure(figsize=(5,3))
dn = dendrogram(Z)   # dendrogram绘制聚类过程，自带matplotlib绘图功能
plt.show()
print(Z)









# DBSCAN接口调用
from sklearn import datasets
from sklearn.cluster import DBSCAN
import numpy as np
import matplotlib.pyplot as plt

iris = datasets.load_iris()
X = iris.data
# print(X.shape)

dbscan = DBSCAN(eps=0.4, min_samples=9)
dbscan.fit(X)
label_pred = dbscan.labels_
print(label_pred)

x0 = X[label_pred == 0]
x1 = X[label_pred == -1]
x2 = X[label_pred == 2]
plt.scatter(x0[:,0], x0[:,1], c='red', marker='o', label='label0')
plt.scatter(x1[:,0], x1[:,1], c='green', marker='*', label='label1')
plt.scatter(x2[:,0], x2[:,1], c='blue', marker='+', label='label2')
plt.xlabel('sepal length')
plt.ylabel('sepal width')
plt.legend(loc=2)
plt.show()









# 最小二乘法实现
import pandas as pd

data  = pd.read_csv('/content/drive/MyDrive/train_data.csv', sep='\s*,\s*',engine='python')
x = data['X'].values
y = data['Y'].values

# 公式部分拆分
nx = 0
ny = 0
nx2 = 0
nxy = 0
n = 4

for i in range(n):
  nx += x[i]
  ny += y[i]
  nx2 += x[i]*x[i]
  nxy += x[i]*y[i]

k = (n*nxy - nx*ny)/(n*nx2 - nx*nx)
b = (ny - k*nx)/n
print('Coeff:{}   Intercept:{}'.format(k,b))










# RANSAC思想实现
import numpy as np
import scipy.linalg as sl
import matplotlib.pyplot as plt

def random_partition(n, n_data):
    """随机分割数据集，返回两个子集的索引"""
    all_idxs = np.arange(n_data)
    np.random.shuffle(all_idxs)
    idxs1 = all_idxs[:n]
    idxs2 = all_idxs[n:]
    return idxs1, idxs2

class LinearLeastSquareModel:
    """线性最小二乘模型，用于 RANSAC"""
    def __init__(self, input_columns, output_columns, debug=False):
        self.input_columns = input_columns
        self.output_columns = output_columns
        self.debug = debug
    
    def fit(self, data):
        """使用最小二乘法拟合模型"""
        A = np.vstack([data[:, i] for i in self.input_columns]).T
        B = np.vstack([data[:, i] for i in self.output_columns]).T
        x, residuals, rank, s = sl.lstsq(A, B)
        return x
    
    def get_error(self, data, model):
        """计算模型的误差"""
        A = np.vstack([data[:, i] for i in self.input_columns]).T
        B = np.vstack([data[:, i] for i in self.output_columns]).T
        B_fit = np.dot(A, model)
        err_per_point = np.sum((B - B_fit) ** 2, axis=1)
        return err_per_point

def ransac(data, model, n, k, t, d, debug=False, return_all=False):
    """执行 RANSAC 算法以拟合数据"""
    iterations = 0
    bestfit = None
    besterr = np.inf
    best_inlier_idxs = None
    while iterations < k:
        maybe_idxs, test_idxs = random_partition(n, data.shape[0])
        maybe_inliers = data[maybe_idxs, :]
        test_points = data[test_idxs]
        maybemodel = model.fit(maybe_inliers)
        test_err = model.get_error(test_points, maybemodel)
        also_idxs = test_idxs[test_err < t]
        also_inliers = data[also_idxs, :]
        if len(also_inliers) > d:
            betterdata = np.concatenate((maybe_inliers, also_inliers))
            bettermodel = model.fit(betterdata)
            better_errs = model.get_error(betterdata, bettermodel)
            thiserr = np.mean(better_errs)
            if thiserr < besterr:
                bestfit = bettermodel
                besterr = thiserr
                best_inlier_idxs = np.concatenate((maybe_idxs, also_idxs))
        iterations += 1
    if bestfit is not None:
        if return_all:
            return bestfit, {'inliers': best_inlier_idxs}
        else:
            return bestfit
    else:
        raise ValueError("Did not meet fit acceptance criteria")

def test():
    """测试 RANSAC 算法"""
    np.random.seed(0)
    # 生成合成数据
    n_samples = 500
    n_inputs = 1
    n_outputs = 1
    A_exact = 20 * np.random.random((n_samples, n_inputs))
    perfect_fit = 60 * np.random.normal(size=(n_inputs, n_outputs))
    B_exact = np.dot(A_exact, perfect_fit)

    A_noisy = A_exact + np.random.normal(size=A_exact.shape)
    B_noisy = B_exact + np.random.normal(size=B_exact.shape)

    # 添加异常值
    n_outliers = 100
    all_idxs = np.arange(A_noisy.shape[0])
    np.random.shuffle(all_idxs)
    outlier_idxs = all_idxs[:n_outliers]
    A_noisy[outlier_idxs] = 20 * np.random.random((n_outliers, n_inputs))
    B_noisy[outlier_idxs] = 50 * np.random.normal(size=(n_outliers, n_outputs))

    all_data = np.hstack((A_noisy, B_noisy))
    input_columns = range(n_inputs)
    output_columns = [n_inputs + i for i in range(n_outputs)]
    model = LinearLeastSquareModel(input_columns, output_columns, debug=False)

    # 执行 RANSAC
    ransac_fit, ransac_data = ransac(all_data, model, 50, 1000, 7e3, 300, debug=True, return_all=True)

    sort_idxs = np.argsort(A_exact[:, 0])
    A_col0_sorted = A_exact[sort_idxs]

    plt.figure(figsize=(12, 8))
    plt.plot(A_noisy[:, 0], B_noisy[:, 0], 'k.', markersize=10, label='Data')
    plt.plot(A_noisy[ransac_data['inliers'], 0], B_noisy[ransac_data['inliers'], 0], 'bx', markersize=12, label="RANSAC inliers")
    plt.plot(A_col0_sorted[:, 0], np.dot(A_col0_sorted, ransac_fit)[:, 0], 'r-', label='RANSAC fit')
    plt.plot(A_col0_sorted[:, 0], np.dot(A_col0_sorted, perfect_fit)[:, 0], 'g-', label='True line')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    test()
