#实现标准化
import numpy as np

def Normalization1(x):
    # (x-xmin)/(xmax-xmin)
    return [(float(i) - min(x))/(max(x) - min(x)) for i in x]

def Normalization2(x):
    # (x-xmean)/(xmax-xin)
    return [(float(i) - np.mean(x))/(max(x)-np.mean(x)) for i in x]

def z_score(x):
    # (x−μ)/σ
    s = np.sqrt(np.sum([(float(i) - np.mean(x)) * (float(i) - np.mean(x)) for i in x])/len(x))
    return [(float(i) - np.mean(x))/s for i in x]


#keras实现神经网络
from tensorflow.keras.datasets import mnist

(train_images,train_labels),(test_images,test_labels) = mnist.load_data()
print("train_images.shape=",train_images.shape)
print("train_labels=",train_labels)
print("test_images.shape=",test_images.shape)
print("test_labels=",test_labels)

from tensorflow.keras import models
from tensorflow.keras import layers

network = models.Sequential()
network.add(layers.Dense(512,activation="relu",input_shape=(28*28,)))
network.add(layers.Dense(10,activation="softmax"))

network.compile(optimizer="rmsprop",loss="categorical_crossentropy",metrics=["accuracy"])

train_images = train_images.reshape((60000,28*28))
train_images = train_images.astype("float32")/255
test_images = test_images.reshape((10000,28*28))
test_images = test_images.astype("float32")/255

from tensorflow.keras.utils import to_categorical
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

network.fit(train_images,train_labels,epochs=5,batch_size=128)

test_loss,test_accuracy = network.evaluate(test_images,test_labels,verbose=1)

import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
plt.imshow(test_images[2],cmap=plt.cm.binary)
plt.show()
test_images = test_images.reshape((10000, 28*28))
res = network.predict(test_images)
print(res[2])

for i in range(res[1].shape[0]):
    if (res[2][i] == 1):
        print("the number for the picture is : ", i)
        break
