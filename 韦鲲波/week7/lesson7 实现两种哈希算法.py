import numpy as np
import matplotlib.pyplot as plt
import cv2

'''
========================================================================================================================
均值哈希算法

缩放
	图片缩放为8*8，保留结构，除去细节。
灰度化
	转换为灰度图
求平均值
	计算灰度图所有像素的平均值
比较
	像素值大于平均值记作1，相反记作0，总共64位。
生成hash
	将上述步骤生成的1和0按顺序组合起来既是图片的指纹（hash）
对比指纹
	将两幅图的指纹对比，计算汉明距离，即两个64位的hash值有多少位是不一样的，不相同位数越少，图片越相似。
'''
def aHash():
    img = cv2.imread('lenna.png', cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (8, 8))
    avg_color = np.mean(img)
    ahash = np.where(img >= avg_color, 1, 0)
    print(ahash)
    return ahash

# q = aHash()

'''
========================================================================================================================
差值哈希算法

差值哈希算法相较于均值哈希算法，前期和后期基本相同，只有中间比较hash有变化
缩放
	图片缩放为8*9，保留结构，除去细节。
灰度化
	转换为灰度图
比较
	像素值大于后一个像素值记作1，相反记作0。本行不与下一行对比，每行9个像素，八个差值，有8行，总共64位
生成hash
	将上述步骤生成的1和0按顺序组合起来既是图片的指纹（hash）
对比指纹
	将两幅图的指纹对比，计算汉明距离，即两个64位的hash值有多少位是不一样的，不相同位数越少，图片越相似。
'''

def dHash():
    img = cv2.imread('lenna.png', cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (9, 8))
    img1 = img[:, :8]
    img2 = img[:, 1:9]
    dhash = np.where(img1 >= img2, 1, 0)
    print(dhash)

# q = dHash()


'''
========================================================================================================================
简单做一下hash值比较

暂时用两个不同的哈希算法求出来的做比较
仅为了学习方法
'''

ah = aHash()
dh = dHash()

diff = np.where(ah != dh, 1, 0)
print(diff)
count = np.sum(diff)
print('两张图的hash汉明距离是', count)





