import numpy as np
import scipy as sp
import scipy.linalg as sl

# 定义一个ransac函数，输入参数:数据，模型，内群点数，迭代次数，阈值，最低内群点数
def RANSAC(data,model,n,k,t,d,debug=False,return_all=False):
    iterations = 0   # 记录迭代次数
    best_fit = None   # 最佳拟合模型
    best_err = np.inf # 最佳拟合模型误差，初始值为无穷大
    best_inlier_idxs = None # 最佳拟合模型内群点的索引
    while iterations<k:
        maybe_idex,test_idxs = random_partition(n,data.shape[0]) # 候选内点与剩余点的索引
        maybe_inliers = data[maybe_idex,:] # 候选内点索引对应的行数据
        test_points = data[test_idxs,:] # 剩余外点索引对应的行数据
        maybe_model = model.fit(maybe_inliers) # 拟合模型
        test_err = model.get_error(test_points,maybe_model) # 计算误差
        also_idxs = test_idxs[test_err<t] # 筛选误差小于阈值的索引
        also_inliers = data[also_idxs,:]
        # print('test_idxs = ', test_idxs)
        # print('test_err = ', test_err < t)
        # print('also_idxs = ', also_idxs)
        if debug:
            print('test_err.min()',test_err.min())
            print('test_err.max()',test_err.max())
            print('numpy.mean(test_err)',numpy.mean(test_err))
            print('iteration %d:len(also_inliers)=%d' % (iterations,len(also_inliers)))
        # print('d=', d)
        if (len(also_inliers)>d):
            better_data = np.concatenate((maybe_inliers,also_inliers))  # 更新内群点
            better_model = model.fit(better_data)
            better_errs = model.get_error(better_data,better_model)
            this_err = np.mean(better_errs) # 平均误差作为新的误差
            if this_err<best_err:
                best_err = this_err
                best_fit = better_model
                best_inlier_idxs = np.concatenate((maybe_idex,also_idxs)) # 更新内群点索引
        iterations += 1
    if best_fit is None:
        raise ValueError('did not meet fit acceptance criteria')
    if return_all:  # 返回一个内群点的字典
        return best_fit,{'inliers':best_inlier_idxs}
    else:
        return best_fit

# 定义一个随机选取内群点的函数
def random_partition(n,n_data):
    all_idxs = np.arange(n_data)  # 获取索引
    np.random.shuffle(all_idxs) # 将索引打乱顺序
    idxs1 = all_idxs[:n]
    idxs2 = all_idxs[n:]
    return idxs1,idxs2

# 定义一个最小二乘法的类
class LinearLeastSquareModel:
    def __init__(self,input_columns,output_columns,debug=False):
        self.input_columns = input_columns
        self.output_columns = output_columns
        self.debug = debug

    def fit(self,data): # 定义拟合函数模型
        X = np.vstack([data[:,i]for i in self.input_columns]).T
        Y = np.vstack([data[:,i]for i in self.output_columns]).T
        x,resids,rank,s = sl.lstsq(X,Y) # x包含斜率与截距，resids是残差和
        return x

    def get_error(self,data,model):
        X = np.vstack([data[:, i] for i in self.input_columns]).T
        Y = np.vstack([data[:, i] for i in self.output_columns]).T
        Y_fit = np.dot(X,model)
        err_per_point = np.sum((Y-Y_fit)**2,axis=1)
        return err_per_point

# 生成理想数据
def test():
    n_samples = 600
    n_inputs = 1
    n_outputs = 1
    X_exact = 20*np.random.random((n_samples,n_inputs)) # 随机
    perfect_fit = 60*np.random.normal(size=(n_inputs,n_outputs)) # 斜率
    Y_exact = np.dot(X_exact,perfect_fit)

    # 加入高斯噪声
    X_noisy = X_exact+np.random.normal(size=X_exact.shape)
    Y_noisy = Y_exact + np.random.normal(size=Y_exact.shape)

    if 1: # 引入离群点
        n_outliers = 100
        all_idxs = np.arange(X_noisy.shape[0])
        np.random.shuffle(all_idxs)
        out_lier_idxs = all_idxs[:n_outliers]
        X_noisy[out_lier_idxs] = 20*np.random.random((n_outliers,n_inputs))
        Y_noisy[out_lier_idxs] = 60*np.random.normal(size=(n_outliers,n_outputs))

    # 定义model
    all_data = np.hstack((X_noisy,Y_noisy)) # 500行，2列
    input_columns = range(n_inputs)
    output_columns = [n_inputs + i for i in range(n_outputs)]
    debug = False
    model = LinearLeastSquareModel(input_columns,output_columns,debug=debug)  # 类的实例化
    linear_fit,resids,rank,s = sp.linalg.lstsq(all_data[:,input_columns],all_data[:,output_columns])

    RANSAC_fit,RANSAC_data = RANSAC(all_data,model,50,1000,7000,300,debug=debug,return_all=True)

    if 1:
        import pylab  # 融合了np+plt

        sort_idxs = np.argsort(X_exact[:,0])  # 从大到小排序
        Y_col0_sorted = X_exact[sort_idxs] # 其他列与X列对应


        pylab.plot(X_noisy[:,0],Y_noisy[:,0],'k.',label='data')   # 噪声点
        pylab.plot(X_noisy[RANSAC_data['inliers'],0],Y_noisy[RANSAC_data['inliers'],0],'bx',label='RANSAC data')

        pylab.plot(Y_col0_sorted[:,0],
                   np.dot(Y_col0_sorted,RANSAC_fit)[:,0],
                   label='RANSAC fit')
        pylab.plot(Y_col0_sorted[:, 0],
                   np.dot(Y_col0_sorted, perfect_fit)[:, 0],
                   label='exact fit')
        pylab.plot(Y_col0_sorted[:, 0],
                   np.dot(Y_col0_sorted, linear_fit)[:, 0],
                   label='linear fit')
        pylab.legend()
        pylab.show()

if __name__ == '__main__':
    test()
