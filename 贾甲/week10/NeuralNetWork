#!/usr/bin/env python
#-*- coding:utf-8 -*-
#author JiaJia time:2024-12-02
import numpy
import scipy.special

class NeuralNetWork:
    #初始化
    def __init__(self,inputnodes,hiddennodes,outputnodes,learningrate):
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        self.lr = learningrate

        # self.wih = numpy.random.rand(self.hnodes,self.inodes) - 0.5
        # self.who = numpy.random.rand(self.onodes,self.hnodes) - 0.5

        self:wih = (numpy.random.normal(0.0,pow(self.inodes,-0.5),(self.hnodes,self.inodes)))
        self.who = (numpy.random.normal(0.0, pow(self.onodes, -0.5), (self.onodes, self.hnodes)))


        self.activation_function = lambda  x:scipy.special.expit(x)
        pass

    # 训练
    def train(self,inputs_list,targets_list):
     #转置
        inputs = numpy.array(inputs_list,ndmin=2).T
        targets = numpy.array(targets_list,ndmin=2).T
        #计算输入层
        hidden_inputs = numpy.dot(self.wih,inputs)
        #中间层
        hidden_outputs = self.activation_function(hidden_inputs)
        #输出层接收信号
        final_inputs = numpy.dot(self.who,hidden_outputs)
        #输出层加激活函数
        final_outputs = self.activation_function(final_inputs)
        #损失函数
        output_errors = targets - final_inputs
        hidden_errors = numpy.dot(self.whp.T,output_errors*final_outputs*(1-final_outputs))

        #根据误差更新权重
        self.who += self.lr*numpy.dot(output_errors * final_outputs * (1 - final_outputs),
                                        numpy.transpose(hidden_outputs))
        self.wih += self.lr * numpy.dot(output_errors * hidden_outputs * (1 - hidden_outputs),
                                        numpy.transpose(inputs))

        pass

    def query(self):
#重复计算过程
        hidden_inputs = numpy.dot(self.wih,inputs)
        hidden_outputs = self.activation_function(hidden_inputs)

        final_inputs = numpy.dot(self.who,hidden_outputs)
        final_outputs = self.activation_function(final_inputs)

        print(final_outputs)
        return final_outputs



#初始化网络
input_nodes = 784    #28*28=784
hidden_nodes = 200
output_nodes = 10
learning_rate = 0.1
n = NeuralNetWork(input_nodes, hidden_nodes, output_nodes, learning_rate)

#读入训练数据
#按找存储数据来定
training_data_file = open("C:/Users/Administrator/Desktop/dateset/mnist_train.csv",'r')
training_data_list = training_data_file.readlines()
training_data_file.close()

#加入epochs,设定循环次数
epochs = 5
for e in range(epochs):
    for reord in training_data_list:
        all_values = record.split(',')
        inputs = (numpy.asfarray(all_values[1:]))/255.0*0.99+0.01

        targets = numpy.zeros(output_nodes)  + 0.01
        targets[int(all_values[0])] = 0.99
        n.train(inputs,targets)

test_data_file = open("C:/Users/Administrator/Desktop/dateset/mnist_test.csv")
test_data_list = test_data_file.readlines()
test_data_file.close()
scores = []
for record in test_data_list:
    all_values = record.split(',')
    correct_number = int(all_values[0])
    print("该图片对应的数字为：",correct_number)

    inputs = (numpy.asfarray(all_values[1:])) / 255.0 * 0.99 + 0.01

    outputs = n.query(inputs)

    label = numpy.argmax(outputs)
    print("网络认为图片数字是：",label)
    if label == correct_number:
        scores.append(1)
    else:
        scores.append(0)
print(scores)
scores_array = numpy.asarray(scores)
print("perfermance = ",scores_array.sum() / scores_array.size)















