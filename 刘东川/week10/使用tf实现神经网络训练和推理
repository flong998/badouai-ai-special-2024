import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
import matplotlib.pyplot as plt

# 数据预处理，转换为 Tensor 并标准化
transform = transforms.Compose([transforms.ToTensor(),
                                transforms.Normalize((0.5,), (0.5,))])

# 下载训练集和测试集
trainset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
testset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)

# 使用 DataLoader 加载数据
trainloader = DataLoader(trainset, batch_size=64, shuffle=True)
testloader = DataLoader(testset, batch_size=64, shuffle=False)


# 定义 CNN 模型
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        # 定义卷积层、池化层和全连接层
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)  # 卷积层1
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)  # 卷积层2
        self.fc1 = nn.Linear(64 * 7 * 7, 128)  # 全连接层1
        self.fc2 = nn.Linear(128, 10)  # 输出层，10个类别

    def forward(self, x):
        # 定义前向传播
        x = torch.relu(self.conv1(x))
        x = torch.max_pool2d(x, 2)  # 池化层，2x2
        x = torch.relu(self.conv2(x))
        x = torch.max_pool2d(x, 2)  # 池化层，2x2
        x = x.view(-1, 64 * 7 * 7)  # 展平
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x


# 初始化模型
model = CNN()

# 损失函数：交叉熵损失
criterion = nn.CrossEntropyLoss()

# 优化器：使用 Adam 优化器
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 训练模型
epochs = 5  # 训练5轮
for epoch in range(epochs):
    model.train()  # 设置为训练模式
    running_loss = 0.0

    for batch_idx, (data, target) in enumerate(trainloader):
        optimizer.zero_grad()  # 清空梯度
        output = model(data)  # 正向传播
        loss = criterion(output, target)  # 计算损失
        loss.backward()  # 反向传播
        optimizer.step()  # 更新参数

        running_loss += loss.item()

        if batch_idx % 100 == 0:  # 每100个批次输出一次损失
            print(f"Epoch [{epoch + 1}/{epochs}], Step [{batch_idx + 1}/{len(trainloader)}], Loss: {loss.item():.4f}")

    print(f"Epoch [{epoch + 1}/{epochs}], Training Loss: {running_loss / len(trainloader):.4f}")

# 测试模型
model.eval()  # 设置为评估模式
correct = 0
total = 0

with torch.no_grad():  # 测试时不需要计算梯度
    for data, target in testloader:
        output = model(data)
        _, predicted = torch.max(output.data, 1)  # 获取预测类别
        total += target.size(0)
        correct += (predicted == target).sum().item()

accuracy = 100 * correct / total
print(f'Test Accuracy: {accuracy:.2f}%')


# 随机选择一些测试图像，并显示模型预测结果
def visualize_predictions():
    dataiter = iter(testloader)
    images, labels = dataiter.next()

    # 显示图片
    plt.figure(figsize=(10, 4))
    for i in range(5):
        plt.subplot(1, 5, i + 1)
        plt.imshow(images[i].squeeze(), cmap='gray')
        plt.title(f"Pred: {model(images[i].unsqueeze(0)).argmax(1).item()}, True: {labels[i].item()}")
        plt.axis('off')
    plt.show()


visualize_predictions()
