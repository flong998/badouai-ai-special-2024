import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt

'使用keras实现简单神经网络'
# 加载MNIST数据集
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# 数据预处理
train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# 构建模型
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))

model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))

model.add(layers.Conv2D(64, (3, 3), activation='relu'))

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

# 编译模型
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 训练模型
model.fit(train_images, train_labels, epochs=5, batch_size=64)

# 评估模型
test_loss, test_acc = model.evaluate(test_images, test_labels)

actual_label = np.argmax(test_labels[0])
test_image = test_images[0]

print(test_image)
print(test_loss)
print(f'Test accuracy: {test_acc}')

test_image_array = np.array(np.expand_dims(test_image, axis=0))

# 进行预测，返回数组中最大值的索引
predictions = model.predict(test_image_array)
predicted_digit = np.argmax(predictions)

# 比较预测结果和实际标签
if predicted_digit == actual_label:
    print("The prediction is correct!")
else:
    print("The prediction is incorrect.")

print(actual_label)
print(f"Predicted digit: {predicted_digit}")

plt.imshow(test_image, cmap='gray')
plt.title("Test Image")
plt.show()

