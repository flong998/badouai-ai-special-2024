from nets import vgg16
import tensorflow as tf
import numpy as np
import utils

# 读取图片,使用 utils 模块中的 load_image 函数读取一张测试图片。
img1 = utils.load_image("./test_data/table.jpg")

# 对输入的图片进行resize，使其shape满足(-1,224,224,3)
# 创建一个 TensorFlow 占位符 inputs 用于接收输入图像，然后使用 utils.resize_image 函数将输入图像调整为大小为 (224, 224) 的图像。
inputs = tf.placeholder(tf.float32,[None,None,3])
resized_img = utils.resize_image(inputs, (224, 224))

# 建立网络结构
# 调用 vgg16 模块中的 vgg_16 函数来构建 VGG16 网络结构，并传入调整后的图像作为输入，得到预测结果 prediction。
prediction = vgg16.vgg_16(resized_img)

# 载入模型
#创建一个 TensorFlow 会话 sess，指定预训练模型的路径 ckpt_filename，初始化全局变量，然后使用 tf.train.Saver 来恢复预训练的模型参数。
#对模型的输出 prediction 进行 softmax 激活，然后通过会话 sess 运行这个操作，并传入读取的图像 img1。
sess = tf.Session()
ckpt_filename = './model/vgg_16.ckpt'
sess.run(tf.global_variables_initializer())
saver = tf.train.Saver()
saver.restore(sess, ckpt_filename)

# 最后结果进行softmax预测
#最后使用 utils 模块中的 print_prob 函数打印预测结果，传入预测的概率 pre[0] 和类别文件路径 ./synset.txt。
pro = tf.nn.softmax(prediction)
pre = sess.run(pro,feed_dict={inputs:img1})

# 打印预测结果
print("result: ")
utils.print_prob(pre[0], './synset.txt')
