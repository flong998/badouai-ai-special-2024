# -*- coding: utf-8 -*-
# time: 2024/11/21 09:45
# file: Normaltion.py
# author: flame
import numpy as np
import matplotlib.pyplot as plt

''' 定义 Min-Max 标准化函数，将数据缩放到 [0, 1] 区间。 '''
def Normaltionzation1(x):
    ''' X_ = (x - x_min) / (x_max - x_min) '''
    ''' 参数: x: list, 需要标准化的数据列表 '''
    ''' 返回: list, 标准化后的数据列表 '''
    return [(float(i) - min(x)) / float(max(x) - min(x)) for i in x]

''' 定义按平均值标准化函数，将数据缩放围绕平均值。 '''
def Normaltionzation2(x):
    ''' x_ = (x - x_mean) / (x_max - x_min) '''
    ''' 参数: x: list, 需要标准化的数据列表 '''
    ''' 返回: list, 标准化后的数据列表 '''
    return [(float(i) - np.mean(x)) / (max(x) - min(x)) for i in x]

''' 定义 Z-Score 标准化函数，将数据转换为标准正态分布。 '''
def z_score(x):
   ''' 计算数据的平均值 '''
   x_mean = np.mean(x)
   ''' 计算数据的标准差 '''
   std_dev = np.std(x)
   ''' 返回标准化后的数据列表 '''
   return [(i - x_mean) / std_dev for i in x]

''' 定义一个数据列表 l '''
l = [-10, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 30]
''' 初始化一个空列表 l1 '''
l1 = []

''' 初始化一个空列表 cs 用于存储每个元素的出现次数 '''
cs = []
''' 遍历数据列表 l 中的每个元素 i '''
for i in l:
    ''' 计算元素 i 在列表 l 中的出现次数 '''
    c = l.count(i)
    ''' 将出现次数添加到列表 cs 中 '''
    cs.append(c)
''' 打印列表 cs '''
print(cs)

''' 调用 Normaltionzation1 函数对数据列表 l 进行 Min-Max 标准化 '''
n1 = Normaltionzation1(l)
''' 打印标准化后的数据列表 n1 '''
print("n1 -> : ", n1)

''' 调用 Normaltionzation2 函数对数据列表 l 进行按平均值标准化 '''
n2 = Normaltionzation2(l)
''' 打印标准化后的数据列表 n2 '''
print("n2 -> : ", n2)

''' 调用 z_score 函数对数据列表 l 进行 Z-Score 标准化 '''
z = z_score(l)
''' 打印标准化后的数据列表 z '''
print("z -> : ", z)

''' 使用 matplotlib 绘制原始数据和标准化后的数据的折线图 '''
plt.plot(l, 'r-', label='original')
plt.plot(n1, 'b-', label='n1')
plt.plot(n2, 'g-', label='n2')
plt.plot(z, 'y-', label='z')
plt.legend()
plt.show()

'''
通过图表现标准化效果
原始数据（红色线）：
显示了未经过标准化的原始数据。
Min-Max 标准化（蓝色线）：
数据被缩放到 [0, 1] 区间，可以看到数据的范围变小，但保持了原始数据的相对位置。
按平均值标准化（绿色线）：
数据被缩放围绕平均值，范围在 [-1, 1] 之间，可以看到数据的中心点在 0 附近。
Z-Score 标准化（黄色线）：
数据被转换为标准正态分布，均值为 0，标准差为 1，可以看到数据的分布更加均匀。
结论:
通过观察图表，可以得出以下结论：
Min-Max 标准化 适用于数据的最大值和最小值已知且变化范围较小的情况，可以有效地将数据缩放到 [0, 1] 区间。
按平均值标准化 适用于数据分布较为均匀且需要保留数据的相对位置的情况，数据被缩放围绕平均值。
Z-Score 标准化 适用于数据分布较为均匀且有较大波动的情况，可以将数据转换为标准正态分布，有助于提高模型的稳定性和准确性。
根据具体的应用场景和数据特性，可以选择合适的标准化方法。

标准化（Normalization）是数据预处理中的一个重要步骤，主要用于调整数据以提高模型性能或训练稳定性。标准化的主要目的是将数据缩放到一个特定范围，以便于模型更好地理解和处理数据。

### 标准化的作用

1. **对图像的作用**：
   - **提高图像处理的一致性**：在处理图像数据时，标准化将像素值调整到一个统一的范围（通常是0到1，或-1到1），这有助于减少输入特征的尺度差异。
   - **加速收敛**：通过消除不同特征尺度的差异，标准化可以加快优化算法的收敛速度。
   - **减少数值不稳定性**：避免出现极端数值（过大或过小）导致的数值不稳定性，特别是在使用神经网络时。

2. **对模型的作用**：
   - **提高模型性能**：通过消除特征之间的尺度差异，标准化可以使模型更加稳定和高效。
   - **减少过拟合风险**：对于一些模型，尤其是深度学习模型，标准化可以使模型更好地泛化到未见数据。
   - **促进优化器效果**：某些优化器（如SGD）对输入特征的尺度非常敏感，标准化可以显著提高这些优化器的效果。

### 常用的标准化方法

1. **Min-Max Scaling**：
   - 将数据缩放到[0, 1]区间。
   - 公式：\( X_{\text{scaled}} = \frac{X - X_{\min}}{X_{\max} - X_{\min}} \)

2. **Z-score Normalization (Standardization)**：
   - 将数据调整为均值为0，标准差为1的分布。
   - 公式：\( X_{\text{standardized}} = \frac{X - \mu}{\sigma} \)
   - 适用于特征服从正态分布的情况。

3. **Batch Normalization**：
   - 在神经网络训练过程中对每个mini-batch的数据进行标准化。
   - 通常用于加速深度学习中的训练过程。

4. **Layer Normalization**：
   - 类似于Batch Normalization，但在每个样本内对所有特征进行标准化，适用于RNN等情况。

### 画图表现标准化效果

在比较标准化方法时，通常会通过绘制损失函数值（或准确率）随训练次数变化的曲线来观察不同标准化方法对模型收敛速度和性能的影响。

- **没有标准化**：收敛速度可能较慢，且损失曲线不稳定。
- **Min-Max Scaling和Z-score Normalization**：常规数据集上的训练收敛速度会加快，损失曲线通常较平滑。
- **Batch Normalization**：通常表现出较快的收敛速度，并且在深层网络中尤为显著。

画图时，通常使用以下指标进行对比：

- **训练损失曲线**：显示不同标准化方法对训练收敛速度和稳定性的影响。
- **验证/测试准确率曲线**：展示在未见数据上实现的模型性能。

通过这些图像，研究者可以直观地看到哪种标准化方法在特定数据集和模型架构上表现更好。具体的结果可能因数据集和模型的不同而变化，因此在实践中通常需要实验来选择合适的标准化方法。
'''